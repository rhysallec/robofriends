{"version":3,"sources":["Card.js","CardList.js","robots.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","CardComponet","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSeachChange","event","setState","seachfield","target","value","state","fetch","then","Response","json","users","filteredRobot","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+MAceA,EAZF,SAACC,GACV,OACI,yBAAKC,UAAY,6CACb,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAAMI,GAAjC,cACrB,6BACI,wBAAIH,UAAY,MAAMD,EAAMK,MAC5B,uBAAIJ,UAAY,MAAMD,EAAMM,UCO7BC,EAZE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACVC,EAAeD,EAAOE,KAAI,SAACC,EAAOC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAGlF,OACI,6BACKG,ICVAD,EAAS,CAClB,CACEJ,GAAI,EACJC,KAAM,sBACNS,SAAU,OACVR,MAAO,uBAET,CACEF,GAAI,EACJC,KAAM,eACNS,SAAU,YACVR,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNS,SAAU,WACVR,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNS,SAAU,WACVR,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNS,SAAU,SACVR,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNS,SAAU,mBACVR,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNS,SAAU,eACVR,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNS,SAAU,gBACVR,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNS,SAAU,WACVR,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNS,SAAU,iBACVR,MAAO,2BC3CES,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKf,UAAW,OAChB,2BACQA,UAAY,+BACZgB,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCAbI,EAPA,SAACpB,GACZ,OACI,yBAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAC3DxB,EAAMyB,WCyCRC,E,kDAtCX,aAAe,IAAD,8BACV,gBAOJC,cAAgB,SAACC,GACb,EAAKC,SAAS,CAAEC,WAAYF,EAAMG,OAAOC,SAPzC,EAAKC,MAAQ,CACTzB,OAAQA,EACRsB,WAAY,IAJN,E,gEAaM,IAAD,OACfI,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACrB,OAAQ8B,S,+BAK/B,IAAD,OACHC,EAAgBC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAC,GAC1C,OAAOA,EAAMrC,KAAKsC,cAAcC,SAAS,EAAKX,MAAMH,WAAWa,kBAGhE,OACI,yBAAK1C,UAAY,MACjB,2CACA,kBAAC,EAAD,CAAWe,aAAgBwB,KAAKb,gBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUnB,OAAQ+B,U,GAhChBM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD0HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c4bb113a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className = 'bg-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src= {`https://robohash.org/${props.id}200x200'`}/>\r\n            <div>\r\n                <h2 className = 'tc'>{props.name}</h2>\r\n                <p  className = 'tc'>{props.email}</p>\r\n            </div>   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ( {robots}) => {\r\n    const CardComponet = robots.map((user , i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            {CardComponet}\r\n        </div> \r\n\r\n    );\r\n}\r\nexport default CardList;","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Rhys Allec Baldemor',\r\n      username: 'Rhys',\r\n      email: 'Rhysallec@gmail.com'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];\r\n  ","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className ='pa2'>\r\n        <input \r\n                className = 'pa3 ba b--green lighest-blue'\r\n                type=\"search\" \r\n                placeholder=\"Search Robots\"\r\n                onChange = {searchChange}>\r\n                \r\n        </input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'650px'}}>\r\n                {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from './CardList.js'\r\nimport {robots} from './robots.js'\r\nimport SearchBox from './SearchBox.js'\r\nimport Scroll from './Scroll.js';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            seachfield: ''\r\n        }\r\n    }\r\n\r\n    onSeachChange = (event) => {\r\n        this.setState({ seachfield :event.target.value})\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('http://jsonplaceholder.typicode.com/users')\r\n        .then(Response=> Response.json())\r\n        .then(users=> this.setState({robots: users}));\r\n        \r\n    }\r\n\r\n\r\n    render() {\r\n    const filteredRobot = this.state.robots.filter(robot =>{\r\n         return robot.name.toLowerCase().includes(this.state.seachfield.toLowerCase());\r\n    })\r\n\r\n        return (\r\n            <div className = 'tc'>\r\n            <h1>Robofriends</h1>\r\n            <SearchBox searchChange = {this.onSeachChange}/>\r\n            <Scroll>\r\n                <CardList robots={filteredRobot}/>\r\n            </Scroll>\r\n            </div>\r\n        )\r\n     }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}